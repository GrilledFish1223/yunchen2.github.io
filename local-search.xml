<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go中interface编程思想</title>
    <link href="/blog/2022/09/15/Go%E4%B8%ADinterface%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    <url>/blog/2022/09/15/Go%E4%B8%ADinterface%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Go中interface编程思想"><a href="#Go中interface编程思想" class="headerlink" title="Go中interface编程思想"></a>Go中interface编程思想</h1><h2 id="理解interface"><a href="#理解interface" class="headerlink" title="理解interface"></a>理解interface</h2><ul><li>interface是方法声明的集合</li><li>任何类型的对象实现了interface接口中声明的全部方法，则表明该类型实现了接口</li><li>interface可以作为一种数据类型，实现该接口的任何对象都可以对对应接口类型变量赋值。</li></ul><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>interface的意义其实是为了满足软件设计的<code>高内聚、低耦合</code>思想。那这其中就需要满意一些原则，如：<code>开闭原则</code>。<br>举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Banker <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-comment">// Save 存款业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Banker)</span></span> Save() &#123;<br>fmt.Println(<span class="hljs-string">&quot;进行了 存款业务...&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// Transfer 转账业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Banker)</span></span> Transfer() &#123;<br>fmt.Println(<span class="hljs-string">&quot;进行了 转账业务...&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// Pay 支付业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *Banker)</span></span> Pay() &#123;<br>fmt.Println(<span class="hljs-string">&quot;进行了 支付业务...&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>banker := &amp;Banker&#123;&#125;<br><br>banker.Save()<br>banker.Pay()<br>banker.Transfer()<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的例子很简单，银行业务有：存款业务、转账业务、支付业务。但是后面会增加很多很多业务的时候，这里业务模块会爆炸。<br>每次新增业务都要这里添加业务，如果新加的业务崩溃也会导致前面业务一起挂掉。业务都在一个Banker中，耦合度太高，开发人员维护成本太高。</p><p><em>如何优化？</em><br>我们可以使用interface将业务抽象出来，制作一个抽象的Banker模块，然后提供一个抽象的方法。 分别根据这个抽象模块，<br>去实现支付Banker（实现支付方法）,转账Banker（实现转账方法）。<br>当我们给一个系统添加一个功能的时候，不是通过修改代码，而是通过增添代码来完成，那么就是开闭原则的核心思想了。所以要想满足上面的要求，<br>是一定需要interface来提供一层抽象的接口的。<br>代码修改如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">/*banker := &amp;Banker&#123;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">banker.Save()</span><br><span class="hljs-comment">banker.Pay()</span><br><span class="hljs-comment">banker.Transfer()*/</span><br><br><span class="hljs-comment">/*//进行存款</span><br><span class="hljs-comment">sb := &amp;SaveBanker&#123;&#125;</span><br><span class="hljs-comment">sb.DoBusiness()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//进行转账</span><br><span class="hljs-comment">tb := &amp;TransferBanker&#123;&#125;</span><br><span class="hljs-comment">tb.DoBusiness()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//进行支付</span><br><span class="hljs-comment">pb := &amp;PayBanker&#123;&#125;</span><br><span class="hljs-comment">pb.DoBusiness()</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 存款</span><br>BankerBusiness(&amp;SaveBanker&#123;&#125;)<br><br><span class="hljs-comment">// 转账</span><br>BankerBusiness(&amp;TransferBanker&#123;&#125;)<br><br><span class="hljs-comment">// 支付</span><br>BankerBusiness(&amp;PayBanker&#123;&#125;)<br>&#125;<br><br><span class="hljs-comment">// AbstractBanker 抽象银行业务</span><br><span class="hljs-keyword">type</span> AbstractBanker <span class="hljs-keyword">interface</span> &#123;<br>DoBusiness()<br>&#125;<br><br><span class="hljs-comment">// TransferBanker 转账业务员 进行转账业务</span><br><span class="hljs-keyword">type</span> TransferBanker <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tb *TransferBanker)</span></span> DoBusiness() &#123;<br>fmt.Println(<span class="hljs-string">&quot;用户转账...&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// SaveBanker 存库业务员 进行存库业务</span><br><span class="hljs-keyword">type</span> SaveBanker <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sb *SaveBanker)</span></span> DoBusiness() &#123;<br>fmt.Println(<span class="hljs-string">&quot;用户存款...&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// PayBanker 支付的业务员</span><br><span class="hljs-keyword">type</span> PayBanker <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">//AbstractBanker</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pb *PayBanker)</span></span> DoBusiness() &#123;<br>fmt.Println(<span class="hljs-string">&quot;进行支付&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// BankerBusiness 实现架构层(基于抽象层进行业务封装-针对interface接口进行封装)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BankerBusiness</span><span class="hljs-params">(banker AbstractBanker)</span></span> &#123;<br><span class="hljs-comment">//通过接口来向下调用，(多态现象)</span><br>banker.DoBusiness()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h2><p>在软件设计的时候，一般为了业务功能扩展性会将模块分为3个层次，抽象层、实现层、业务逻辑层。<br><em>如何做？</em><br>先将抽象层的模块和接口定义出来， 这里就需要interface接口的设计，然后我们依照抽象层，依次实现每个实现层的模块，在我们写实现层代码的时候，实际上我们<br>只需要参考对应的抽象层实现就好了，实现每个模块，也和其他的实现的模块没有关系，这样也符合了上面介绍的开闭原则。这样实<br>现起来每个模块只依赖对象的接口，而和其他模块没关系，依赖关系单一。<br>指定业务逻辑也是一样，只需要参考抽象层的接口来业务就好了，抽象层暴露出来的接口就是我们业务层可以使用的方法，然后<br>可以通过多态的线下，接口指针指向哪个实现模块，调用了就是具体的实现方法，这样我们业务逻辑层也是依赖抽象成编程。<br>这种的设计原则就叫做依赖倒转原则。<br>示例：<br>组装2台电脑，<br>— 抽象层 —有显卡Card  方法display，有内存Memory 方法storage，有处理器CPU 方法calculate<br>— 实现层层 —有 Intel因特尔公司 、产品有(显卡、内存、CPU)，有 Kingston 公司， 产品有(内存3)，有 NVIDIA 公司， 产品有(显卡)<br>— 逻辑层 —1. 组装一台Intel系列的电脑，并运行，2. 组装一台 Intel CPU  Kingston内存 NVIDIA显卡的电脑，并运行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Card <span class="hljs-keyword">interface</span> &#123;<br>Display()<br>&#125;<br><br><span class="hljs-keyword">type</span> Memory <span class="hljs-keyword">interface</span> &#123;<br>Storage()<br>&#125;<br><br><span class="hljs-keyword">type</span> CPU <span class="hljs-keyword">interface</span> &#123;<br>Calculate()<br>&#125;<br><br><span class="hljs-keyword">type</span> Computer <span class="hljs-keyword">struct</span> &#123;<br>cpu    CPU<br>card   Card<br>memory Memory<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewComputer</span><span class="hljs-params">(cpu CPU, card Card, memory Memory)</span></span> *Computer &#123;<br><span class="hljs-keyword">return</span> &amp;Computer&#123;<br>cpu:    cpu,<br>card:   card,<br>memory: memory,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Computer)</span></span> DoWork() &#123;<br>c.cpu.Calculate()<br>c.card.Display()<br>c.memory.Storage()<br>&#125;<br><br><span class="hljs-comment">// 实现层</span><br><span class="hljs-keyword">type</span> IntelCard <span class="hljs-keyword">struct</span> &#123;<br>Card<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(intel *IntelCard)</span></span> Display() &#123;<br>fmt.Println(<span class="hljs-string">&quot;intel card 显示内容了。。。&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> IntelMemory <span class="hljs-keyword">struct</span> &#123;<br>Memory<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(intel *IntelMemory)</span></span> Storage() &#123;<br>fmt.Println(<span class="hljs-string">&quot;intel memory storage ...&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> IntelCpu <span class="hljs-keyword">struct</span> &#123;<br>CPU<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(intel *IntelCpu)</span></span> Calculate() &#123;<br>fmt.Println(<span class="hljs-string">&quot;intel calculate 计算内容...&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> KingstonMemory <span class="hljs-keyword">struct</span> &#123;<br>Memory<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(k *KingstonMemory)</span></span> Storage() &#123;<br>fmt.Println(<span class="hljs-string">&quot;Kingston&#x27;s memory (内存3) storage ...&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> NVIDIACard <span class="hljs-keyword">struct</span> &#123;<br>Card<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n *NVIDIACard)</span></span> Display() &#123;<br>fmt.Println(<span class="hljs-string">&quot;NVIDIA card 显示内容了。。。&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 逻辑层</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//intel系列的电脑</span><br>com1 := NewComputer(&amp;IntelCpu&#123;&#125;, &amp;IntelCard&#123;&#125;, &amp;IntelMemory&#123;&#125;)<br>com1.DoWork()<br><span class="hljs-comment">// 其他牌子</span><br>com2 := NewComputer(&amp;IntelCpu&#123;&#125;, &amp;NVIDIACard&#123;&#125;, &amp;KingstonMemory&#123;&#125;)<br>com2.DoWork()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.yuque.com/aceld/golang/uh0124">https://www.yuque.com/aceld/golang/uh0124</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go_interview</title>
    <link href="/blog/2022/09/14/go-interview/"/>
    <url>/blog/2022/09/14/go-interview/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis架构理解</title>
    <link href="/blog/2022/08/24/Redis%E6%9E%B6%E6%9E%84%E7%90%86%E8%A7%A3/"/>
    <url>/blog/2022/08/24/Redis%E6%9E%B6%E6%9E%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>redis架构</p><img src="/blog/2022/08/24/Redis%E6%9E%B6%E6%9E%84%E7%90%86%E8%A7%A3/redis_struct.jpeg" class="" title="redis">]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go基础实践积累</title>
    <link href="/blog/2022/08/24/Go%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B5%E7%A7%AF%E7%B4%AF/"/>
    <url>/blog/2022/08/24/Go%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B5%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="golang的bug调试及性能分析方法实践"><a href="#golang的bug调试及性能分析方法实践" class="headerlink" title="golang的bug调试及性能分析方法实践"></a>golang的bug调试及性能分析方法实践</h1><h2 id="1-系统自带time工具查看"><a href="#1-系统自带time工具查看" class="headerlink" title="1. 系统自带time工具查看"></a>1. 系统自带time工具查看</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">time</span> go run main.go<br><br><span class="hljs-attribute">go</span> run main.go  <span class="hljs-number">0</span>.<span class="hljs-number">00</span>s user <span class="hljs-number">0</span>.<span class="hljs-number">00</span>s system <span class="hljs-number">10</span>% cpu <span class="hljs-number">0</span>.<span class="hljs-number">003</span> total<br><span class="hljs-attribute">real</span><span class="hljs-number">0</span>m0.<span class="hljs-number">843</span>s<br><span class="hljs-attribute">user</span><span class="hljs-number">0</span>m0.<span class="hljs-number">216</span>s<br><span class="hljs-attribute">sys</span><span class="hljs-number">0</span>m0.<span class="hljs-number">389</span>s<br></code></pre></td></tr></table></figure><ul><li>real：从程序开始到结束，实际度过的时间；</li><li>user：程序在用户态度过的时间；</li><li>sys：程序在内核态度过的时间。<br>一般情况下 real &gt;&#x3D; user + sys，因为系统还有其它进程(切换其他进程中间对于本进程会有空白期)。</li></ul><h2 id="2-top命令排查"><a href="#2-top命令排查" class="headerlink" title="2. top命令排查"></a>2. top命令排查</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">top -p <span class="hljs-constructor">$(<span class="hljs-params">pidof</span> 进程名)</span><br></code></pre></td></tr></table></figure><h2 id="3-GODEBUG与gctrace"><a href="#3-GODEBUG与gctrace" class="headerlink" title="3. GODEBUG与gctrace"></a>3. GODEBUG与gctrace</h2><p>在编译出的二进制文件前面添加环境变量<code>GODEBUG=&#39;gctrace=1&#39;</code>来跟踪打印垃圾回收器信息</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">GODEBUG</span>=<span class="hljs-string">&#x27;gctrace=1&#x27;</span> ./main  <span class="hljs-comment"># main是编译出的可执行文件</span><br></code></pre></td></tr></table></figure><p>设置gctrace&#x3D;1会使得垃圾回收器在每次回收时汇总所回收内存的大小以及耗时，<br>并将这些内容汇总成单行内容打印到标准错误输出中。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">gc # @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #-&gt;#-&gt;# MB, # MB goal, # P<br><br># 含义说明：<br>gc #        GC次数的编号，每次GC时递增<br>@#s         距离程序开始执行时的时间<br>#%          GC占用的执行时间百分比<br>#+...+#     GC使用的时间<br>#-&gt;#-&gt;# MB  GC开始，结束，以及当前活跃堆内存的大小，单位M<br># MB goal   全局堆内存大小<br># P         使用processor的数量<br></code></pre></td></tr></table></figure><p>如果每条信息最后，以(forced)结尾，那么该信息是由runtime.GC()调用触发<br>举例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gc</span> <span class="hljs-number">39</span> @<span class="hljs-number">2285</span>.<span class="hljs-number">308</span>s <span class="hljs-number">1</span>%: <span class="hljs-number">0</span>.<span class="hljs-number">015</span>+<span class="hljs-number">0</span>.<span class="hljs-number">091</span>+<span class="hljs-number">0</span>.<span class="hljs-number">002</span> ms clock, <span class="hljs-number">0</span>.<span class="hljs-number">12</span>+<span class="hljs-number">0</span>/<span class="hljs-number">0</span>.<span class="hljs-number">13</span>/<span class="hljs-number">0</span>.<span class="hljs-number">061</span>+<span class="hljs-number">0</span>.<span class="hljs-number">017</span> ms cpu, <span class="hljs-number">284</span>-&gt;<span class="hljs-number">481</span>-&gt;<span class="hljs-number">355</span> MB, <span class="hljs-number">8</span> MB goal, <span class="hljs-number">8</span> P<br></code></pre></td></tr></table></figure><p>该条含义</p><ul><li>gc 39: Gc 调试编号为39</li><li>@2285.308s:此时程序已经执行了2285.308s</li><li>1%: 2285.308s中其中gc模块占用了1%的时间</li><li>0.015+0.091+0.002 ms clock: 垃圾回收的时间，分别为STW（stop-the-world）清扫的时间+并发标记和扫描的时间+STW标记的时间</li><li>0.12+0&#x2F;0.13&#x2F;0.061+0.017 ms cpu: 垃圾回收占用cpu时间</li><li>284-&gt;481-&gt;355 MB： GC开始前堆内存284M， GC结束后堆内存481M，当前活跃的堆内存355M</li><li>8 MB goal: 全局堆内存大小</li><li>2 P: 本次GC使用了2个P(调度器中的Processer)</li></ul><h2 id="4-使用runtime-ReadMemStats-方法"><a href="#4-使用runtime-ReadMemStats-方法" class="headerlink" title="4.使用runtime.ReadMemStats()方法"></a>4.使用runtime.ReadMemStats()方法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;runtime&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readMemStats</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-keyword">var</span> ms runtime.MemStats<br><br>    runtime.ReadMemStats(&amp;ms)<br><br>    log.Printf(<span class="hljs-string">&quot; ===&gt; Alloc:%d(bytes) HeapIdle:%d(bytes) HeapReleased:%d(bytes)&quot;</span>, ms.Alloc, ms.HeapIdle, ms.HeapReleased)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//slice 会动态扩容，用slice来做堆内存申请</span><br>    container := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">8</span>)<br><br>    log.Println(<span class="hljs-string">&quot; ===&gt; loop begin.&quot;</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>*<span class="hljs-number">1000</span>*<span class="hljs-number">1000</span>; i++ &#123;<br>        container = <span class="hljs-built_in">append</span>(container, i)<br>        <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">16</span>*<span class="hljs-number">1000</span>*<span class="hljs-number">1000</span>) &#123;<br>            readMemStats()<br>        &#125;<br>    &#125;<br><br>    log.Println(<span class="hljs-string">&quot; ===&gt; loop end.&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    log.Println(<span class="hljs-string">&quot; ===&gt; [Start].&quot;</span>)<br><br>    readMemStats()<br>    test()<br>    readMemStats()<br><br>    log.Println(<span class="hljs-string">&quot; ===&gt; [force gc].&quot;</span>)<br>    runtime.GC() <span class="hljs-comment">//强制调用gc回收</span><br><br>    log.Println(<span class="hljs-string">&quot; ===&gt; [Done].&quot;</span>)<br>    readMemStats()<br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">for</span> &#123;<br>            readMemStats()<br>            time.Sleep(<span class="hljs-number">10</span> * time.Second)<br>        &#125;<br>    &#125;()<br><br>    time.Sleep(<span class="hljs-number">3600</span> * time.Second) <span class="hljs-comment">//睡眠，保持程序不退出</span><br>&#125;<br></code></pre></td></tr></table></figure><p>封装了一个函数readMemStats()，这里面主要是调用runtime中的ReadMemStats()方法获得内存信息，然后通过log打印出来。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dns">$ go run demo2.go <br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">17</span>  ===&gt; [Start].<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">17</span>  ===&gt; Alloc:<span class="hljs-number">71280</span>(bytes) HeapIdle:<span class="hljs-number">66633728</span>(bytes) HeapReleased:<span class="hljs-number">66600960</span>(bytes)<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">17</span>  ===&gt; loop begin.<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">18</span>  ===&gt; Alloc:<span class="hljs-number">132535744</span>(bytes) HeapIdle:<span class="hljs-number">336756736</span>(bytes) HeapReleased:<span class="hljs-number">155721728</span>(bytes)<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">38</span>  ===&gt; loop end.<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">38</span>  ===&gt; Alloc:<span class="hljs-number">598300600</span>(bytes) HeapIdle:<span class="hljs-number">609181696</span>(bytes) HeapReleased:<span class="hljs-number">434323456</span>(bytes)<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">38</span>  ===&gt; [force gc].<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">38</span>  ===&gt; [Done].<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">38</span>  ===&gt; Alloc:<span class="hljs-number">55840</span>(bytes) HeapIdle:<span class="hljs-number">1207427072</span>(bytes) HeapReleased:<span class="hljs-number">434266112</span>(bytes)<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">38</span>  ===&gt; Alloc:<span class="hljs-number">56656</span>(bytes) HeapIdle:<span class="hljs-number">1207394304</span>(bytes) HeapReleased:<span class="hljs-number">434266112</span>(bytes)<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">48</span>  ===&gt; Alloc:<span class="hljs-number">56912</span>(bytes) HeapIdle:<span class="hljs-number">1207394304</span>(bytes) HeapReleased:<span class="hljs-number">1206493184</span>(bytes)<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">21</span>:<span class="hljs-number">58</span>  ===&gt; Alloc:<span class="hljs-number">57488</span>(bytes) HeapIdle:<span class="hljs-number">1207394304</span>(bytes) HeapReleased:<span class="hljs-number">1206493184</span>(bytes)<br><span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">22</span>:<span class="hljs-number">08</span>  ===&gt; Alloc:<span class="hljs-number">57616</span>(bytes) HeapIdle:<span class="hljs-number">1207394304</span>(bytes) HeapReleased:<span class="hljs-number">1206493184</span>(bytes)<br>c<span class="hljs-number">2020/03/02</span> <span class="hljs-number">18</span>:<span class="hljs-number">22</span>:<span class="hljs-number">18</span>  ===&gt; Alloc:<span class="hljs-number">57744</span>(bytes) HeapIdle:<span class="hljs-number">1207394304</span>(bytes) HeapReleased:<span class="hljs-number">1206493184</span>(by<br></code></pre></td></tr></table></figure><p>可以看到，打印[Done].之后那条trace信息，Alloc已经下降，即内存已被垃圾回收器回收。在2020&#x2F;03&#x2F;02 18:21:38和2020&#x2F;03&#x2F;02 18:21:48的两条trace信息中，HeapReleased开始上升，即垃圾回收器把内存归还给系统。</p><h2 id="5-使用pprof工具"><a href="#5-使用pprof工具" class="headerlink" title="5. 使用pprof工具"></a>5. 使用pprof工具</h2><p>可视化和分析性能分析数据的工具，可以进行CPU分析，内存分析，阻塞分析和互斥锁分析等。</p><h3 id="测试Demo"><a href="#测试Demo" class="headerlink" title="测试Demo"></a>测试Demo</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>_ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>log.Println(add(<span class="hljs-string">&quot;https://github.com/EDDYCJY&quot;</span>))<br>&#125;<br>&#125;()<br><br>http.ListenAndServe(<span class="hljs-string">&quot;0.0.0.0:6050&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> datas []<span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(str <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>data := []<span class="hljs-type">byte</span>(str)<br>sData := <span class="hljs-type">string</span>(data)<br>datas = <span class="hljs-built_in">append</span>(datas, sData)<br><span class="hljs-keyword">return</span> sData<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h3><h4 id="方式一：-通过Web界面分析"><a href="#方式一：-通过Web界面分析" class="headerlink" title="方式一： 通过Web界面分析"></a>方式一： 通过Web界面分析</h4><p>浏览器访问： <code>http://localhost:6050/debug/pprof/</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vim">/<span class="hljs-keyword">debug</span>/pprof/<br><br>Types of profiles available:<br>CountProfile<br><span class="hljs-number">37</span>allocs<br><span class="hljs-number">0</span>block<br><span class="hljs-number">0</span>cmdline<br><span class="hljs-number">6</span>goroutine<br><span class="hljs-number">37</span>heap<br><span class="hljs-number">0</span>mutex<br><span class="hljs-number">0</span><span class="hljs-keyword">profile</span><br><span class="hljs-number">16</span>threadcreate<br><span class="hljs-number">0</span>trace<br>full goroutine stack dump<br>Profile Descriptions:<br><br>allocs: A sampling of <span class="hljs-keyword">all</span> past memory allocations<br>block: Stack traces that led <span class="hljs-keyword">to</span> blocking <span class="hljs-keyword">on</span> synchronization primitives<br>cmdline: The <span class="hljs-keyword">command</span> <span class="hljs-built_in">line</span> invocation of the current program<br>goroutine: Stack traces of <span class="hljs-keyword">all</span> current goroutines<br>heap: A sampling of memory allocations of live objects. You can specify the gc GET parameter <span class="hljs-keyword">to</span> run GC before taking the heap sample.<br>mutex: Stack traces of holders of contended mutexes<br><span class="hljs-keyword">profile</span>: CPU <span class="hljs-keyword">profile</span>. You can specify the duration in the seconds GET parameter. After you <span class="hljs-built_in">get</span> the <span class="hljs-keyword">profile</span> <span class="hljs-keyword">file</span>, use the <span class="hljs-keyword">go</span> tool pprof <span class="hljs-keyword">command</span> <span class="hljs-keyword">to</span> investigate the <span class="hljs-keyword">profile</span>.<br>threadcreate: Stack traces that led <span class="hljs-keyword">to</span> the creation of <span class="hljs-keyword">new</span> OS threads<br>trace: A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you <span class="hljs-built_in">get</span> the trace <span class="hljs-keyword">file</span>, use the <span class="hljs-keyword">go</span> tool trace <span class="hljs-keyword">command</span> <span class="hljs-keyword">to</span> investigate the trace.<br></code></pre></td></tr></table></figure><h4 id="方式二：-通过互式终端分析"><a href="#方式二：-通过互式终端分析" class="headerlink" title="方式二： 通过互式终端分析"></a>方式二： 通过互式终端分析</h4><h5 id="1-go-tool-pprof-http-localhost-6050-debug-pprof-profile"><a href="#1-go-tool-pprof-http-localhost-6050-debug-pprof-profile" class="headerlink" title="1. go tool pprof http://localhost:6050/debug/pprof/profile"></a>1. <code>go tool pprof http://localhost:6050/debug/pprof/profile</code></h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vim">❯ <span class="hljs-keyword">go</span> tool pprof http://localhos<span class="hljs-variable">t:6050</span>/<span class="hljs-keyword">debug</span>/pprof/<span class="hljs-keyword">profile</span>\?seconds\=<span class="hljs-number">60</span>  # 终端执行<br>Fetching <span class="hljs-keyword">profile</span> over HTTP from http://localhos<span class="hljs-variable">t:6050</span>/<span class="hljs-keyword">debug</span>/pprof/<span class="hljs-keyword">profile</span>?seconds=<span class="hljs-number">60</span><br>Saved <span class="hljs-keyword">profile</span> in /Users/leospzhang/pprof/pprof.samples.cpu.<span class="hljs-number">001</span>.pb.gz<br>Type: cpu<br>Time: Sep <span class="hljs-number">5</span>, <span class="hljs-number">2022</span> at <span class="hljs-number">11</span>:<span class="hljs-number">21</span><span class="hljs-keyword">am</span> (CST)<br>Duration: <span class="hljs-number">60</span>s, Total samples = <span class="hljs-number">1.29</span>s ( <span class="hljs-number">2.15</span>%)<br>Entering interactive <span class="hljs-keyword">mode</span> (<span class="hljs-built_in">type</span> <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> commands, <span class="hljs-string">&quot;o&quot;</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">options</span>)<br>(pprof) top10<br>Showing nodes accounting <span class="hljs-keyword">for</span> <span class="hljs-number">1.24</span>s, <span class="hljs-number">96.12</span>% of <span class="hljs-number">1.29</span>s total<br>Showing top <span class="hljs-number">10</span> nodes out of <span class="hljs-number">53</span><br>      flat  flat%   sum%        cum   cum%<br>     <span class="hljs-number">0.99</span>s <span class="hljs-number">76.74</span>% <span class="hljs-number">76.74</span>%      <span class="hljs-number">1.09</span>s <span class="hljs-number">84.50</span>%  syscall.syscall<br>     <span class="hljs-number">0.11</span>s  <span class="hljs-number">8.53</span>% <span class="hljs-number">85.27</span>%      <span class="hljs-number">0.11</span>s  <span class="hljs-number">8.53</span>%  <span class="hljs-keyword">runtime</span>.libcCall<br>     <span class="hljs-number">0.03</span>s  <span class="hljs-number">2.33</span>% <span class="hljs-number">87.60</span>%      <span class="hljs-number">0.05</span>s  <span class="hljs-number">3.88</span>%  <span class="hljs-keyword">runtime</span>.findObject<br>     <span class="hljs-number">0.02</span>s  <span class="hljs-number">1.55</span>% <span class="hljs-number">89.15</span>%      <span class="hljs-number">0.02</span>s  <span class="hljs-number">1.55</span>%  <span class="hljs-keyword">runtime</span>.memmove<br>     <span class="hljs-number">0.02</span>s  <span class="hljs-number">1.55</span>% <span class="hljs-number">90.70</span>%      <span class="hljs-number">0.02</span>s  <span class="hljs-number">1.55</span>%  <span class="hljs-keyword">runtime</span>.pageIndexOf (inline)<br>     <span class="hljs-number">0.02</span>s  <span class="hljs-number">1.55</span>% <span class="hljs-number">92.25</span>%      <span class="hljs-number">0.08</span>s  <span class="hljs-number">6.20</span>%  <span class="hljs-keyword">runtime</span>.scanobject<br>     <span class="hljs-number">0.02</span>s  <span class="hljs-number">1.55</span>% <span class="hljs-number">93.80</span>%      <span class="hljs-number">0.03</span>s  <span class="hljs-number">2.33</span>%  <span class="hljs-keyword">runtime</span>.usleep<br>     <span class="hljs-number">0.01</span>s  <span class="hljs-number">0.78</span>% <span class="hljs-number">94.57</span>%      <span class="hljs-number">0.01</span>s  <span class="hljs-number">0.78</span>%  <span class="hljs-keyword">runtime</span>.(*mSpanStateBox).<span class="hljs-built_in">get</span> (inline)<br>     <span class="hljs-number">0.01</span>s  <span class="hljs-number">0.78</span>% <span class="hljs-number">95.35</span>%      <span class="hljs-number">0.01</span>s  <span class="hljs-number">0.78</span>%  <span class="hljs-keyword">runtime</span>.(*mspan).markBitsForIndex (inline)<br>     <span class="hljs-number">0.01</span>s  <span class="hljs-number">0.78</span>% <span class="hljs-number">96.12</span>%      <span class="hljs-number">0.04</span>s  <span class="hljs-number">3.10</span>%  <span class="hljs-keyword">runtime</span>.greyobject<br>(pprof) <br></code></pre></td></tr></table></figure><p>执行该命令后，需等待 60 秒（可调整 seconds 的值），pprof 会进行 CPU Profiling。结束后将默认进入 pprof 的交互式命令模式，可以对分析的结果进行查看或导出。具体可执行 pprof help 查看命令说明</p><ul><li>flat：当前函数占用CPU的耗时</li><li>flat%：:当前函数占用CPU的耗时百分比</li><li>sum%：函数占用CPU的耗时累计百分比</li><li>cum：当前函数加上调用当前函数的函数占用CPU的总耗时</li><li>cum%：当前函数加上调用当前函数的函数占用CPU的总耗时百分比</li><li>最后一列：函数名称</li></ul><h5 id="2-go-tool-pprof-http-localhost-6050-debug-pprof-heap"><a href="#2-go-tool-pprof-http-localhost-6050-debug-pprof-heap" class="headerlink" title="2. go tool pprof http://localhost:6050/debug/pprof/heap"></a>2. <code>go tool pprof http://localhost:6050/debug/pprof/heap</code></h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vim"> <span class="hljs-keyword">go</span> tool pprof http://localhos<span class="hljs-variable">t:6050</span>/<span class="hljs-keyword">debug</span>/pprof/heap<br>Fetching <span class="hljs-keyword">profile</span> over HTTP from http://localhos<span class="hljs-variable">t:6050</span>/<span class="hljs-keyword">debug</span>/pprof/heap<br>Saved <span class="hljs-keyword">profile</span> in /Users/leospzhang/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.<span class="hljs-number">001</span>.pb.gz<br>Type: inuse_space<br>Time: Sep <span class="hljs-number">5</span>, <span class="hljs-number">2022</span> at <span class="hljs-number">11</span>:<span class="hljs-number">34</span><span class="hljs-keyword">am</span> (CST)<br>Entering interactive <span class="hljs-keyword">mode</span> (<span class="hljs-built_in">type</span> <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> commands, <span class="hljs-string">&quot;o&quot;</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">options</span>)<br>(pprof) top<br>Showing nodes accounting <span class="hljs-keyword">for</span> <span class="hljs-number">454.93</span>MB, <span class="hljs-number">99.78</span>% of <span class="hljs-number">455.93</span>MB total<br>Dropped <span class="hljs-number">10</span> nodes (cum &lt;= <span class="hljs-number">2.28</span>MB)<br>      flat  flat%   sum%        cum   cum%<br>  <span class="hljs-number">452.42</span>MB <span class="hljs-number">99.23</span>% <span class="hljs-number">99.23</span>%   <span class="hljs-number">452.42</span>MB <span class="hljs-number">99.23</span>%  main.<span class="hljs-built_in">add</span> (inline)<br>    <span class="hljs-number">2.50</span>MB  <span class="hljs-number">0.55</span>% <span class="hljs-number">99.78</span>%     <span class="hljs-number">2.50</span>MB  <span class="hljs-number">0.55</span>%  <span class="hljs-keyword">runtime</span>.allocm<br>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>% <span class="hljs-number">99.78</span>%   <span class="hljs-number">452.42</span>MB <span class="hljs-number">99.23</span>%  main.main.func1<br>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>% <span class="hljs-number">99.78</span>%     <span class="hljs-number">2.50</span>MB  <span class="hljs-number">0.55</span>%  <span class="hljs-keyword">runtime</span>.newm<br>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>% <span class="hljs-number">99.78</span>%     <span class="hljs-number">2.50</span>MB  <span class="hljs-number">0.55</span>%  <span class="hljs-keyword">runtime</span>.resetspinning<br>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>% <span class="hljs-number">99.78</span>%     <span class="hljs-number">2.50</span>MB  <span class="hljs-number">0.55</span>%  <span class="hljs-keyword">runtime</span>.schedule<br>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>% <span class="hljs-number">99.78</span>%     <span class="hljs-number">2.50</span>MB  <span class="hljs-number">0.55</span>%  <span class="hljs-keyword">runtime</span>.startm<br>         <span class="hljs-number">0</span>     <span class="hljs-number">0</span>% <span class="hljs-number">99.78</span>%     <span class="hljs-number">2.50</span>MB  <span class="hljs-number">0.55</span>%  <span class="hljs-keyword">runtime</span>.wakep<br>(pprof) <br></code></pre></td></tr></table></figure><p>进入交互界面后<code>top</code>可以查看</p><ul><li>-inuse_space：分析应用程序的常驻内存占用情况</li><li>-alloc_objects：分析应用程序的内存临时分配情况</li></ul><h4 id="方式三：-PProf-可视化界面"><a href="#方式三：-PProf-可视化界面" class="headerlink" title="方式三： PProf 可视化界面"></a>方式三： PProf 可视化界面</h4><h5 id="1-Demo-程序"><a href="#1-Demo-程序" class="headerlink" title="1. Demo 程序"></a>1. Demo 程序</h5><p>对前面的<code>add</code>方法test</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;https://github.com/yunchen2&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test_add</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>s := add(url)<br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> &#123;<br>t.Errorf(<span class="hljs-string">&quot;Test.Add error!&quot;</span>)<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkAdd</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>add(url)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-执行测试用例"><a href="#2-执行测试用例" class="headerlink" title="2.执行测试用例"></a>2.执行测试用例</h5><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">❯ go <span class="hljs-keyword">test</span> -bench=. -cpuprofile=<span class="hljs-meta">cpu</span><span class="hljs-number">.</span>prof<br><span class="hljs-symbol">goos:</span> darwin<br><span class="hljs-symbol">goarch:</span> amd64<br><span class="hljs-symbol">pkg:</span> testDemo/<span class="hljs-keyword">test</span><br><span class="hljs-symbol">cpu:</span> Intel(R) Core(TM) i7-<span class="hljs-number">9750H</span> <span class="hljs-meta">CPU</span> @ <span class="hljs-number">2.</span>60GHz<br>BenchmarkAdd-<span class="hljs-number">12</span>         <span class="hljs-number">13971609</span>               <span class="hljs-number">131.1</span> ns/op<br>PASS<br>ok      testDemo/<span class="hljs-keyword">test</span>      <span class="hljs-number">4.</span>347s<br></code></pre></td></tr></table></figure><h5 id="3-启动-PProf-可视化界面"><a href="#3-启动-PProf-可视化界面" class="headerlink" title="3.启动 PProf 可视化界面"></a>3.启动 PProf 可视化界面</h5><ul><li>方式一： <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">go<span class="hljs-built_in"> tool </span>pprof <span class="hljs-attribute">-http</span>=:8080 cpu.prof<br></code></pre></td></tr></table></figure></li><li>方式二： <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> tool pprof cpu.<span class="hljs-keyword">prof</span> <br>(pprof) web<br></code></pre></td></tr></table></figure><em>出现 Could not execute dot; may need to install graphviz.，就是提示你要安装 graphviz</em></li></ul><h5 id="4-查看-PProf-可视化界面"><a href="#4-查看-PProf-可视化界面" class="headerlink" title="4.查看 PProf 可视化界面"></a>4.查看 PProf 可视化界面</h5><ul><li>查看Top<br>浏览器访问<code>http://localhost:8080/ui/top</code><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Flat</span>Flat%Sum%CumCum%NameInlined?<br><span class="hljs-attribute">1</span>.<span class="hljs-number">33</span>s<span class="hljs-number">19</span>.<span class="hljs-number">67</span>%<span class="hljs-number">19</span>.<span class="hljs-number">67</span>%<span class="hljs-number">1</span>.<span class="hljs-number">33</span>s<span class="hljs-number">19</span>.<span class="hljs-number">67</span>%runtime.memmove<br><span class="hljs-attribute">0</span>.<span class="hljs-number">82</span>s<span class="hljs-number">12</span>.<span class="hljs-number">13</span>%<span class="hljs-number">31</span>.<span class="hljs-number">80</span>%<span class="hljs-number">2</span>.<span class="hljs-number">43</span>s<span class="hljs-number">35</span>.<span class="hljs-number">95</span>%runtime.scanobject<br><span class="hljs-attribute">0</span>.<span class="hljs-number">75</span>s<span class="hljs-number">11</span>.<span class="hljs-number">09</span>%<span class="hljs-number">42</span>.<span class="hljs-number">90</span>%<span class="hljs-number">0</span>.<span class="hljs-number">92</span>s<span class="hljs-number">13</span>.<span class="hljs-number">61</span>%runtime.usleep<br><span class="hljs-attribute">0</span>.<span class="hljs-number">50</span>s<span class="hljs-number">7</span>.<span class="hljs-number">40</span>%<span class="hljs-number">50</span>.<span class="hljs-number">30</span>%<span class="hljs-number">0</span>.<span class="hljs-number">93</span>s<span class="hljs-number">13</span>.<span class="hljs-number">76</span>%runtime.findObject<br><span class="hljs-attribute">0</span>.<span class="hljs-number">43</span>s<span class="hljs-number">6</span>.<span class="hljs-number">36</span>%<span class="hljs-number">56</span>.<span class="hljs-number">66</span>%<span class="hljs-number">3</span>.<span class="hljs-number">06</span>s<span class="hljs-number">45</span>.<span class="hljs-number">27</span>%testDemo/go-bastic.add(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">42</span>s<span class="hljs-number">6</span>.<span class="hljs-number">21</span>%<span class="hljs-number">62</span>.<span class="hljs-number">87</span>%<span class="hljs-number">0</span>.<span class="hljs-number">42</span>s<span class="hljs-number">6</span>.<span class="hljs-number">21</span>%runtime.pageIndexOf(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">29</span>s<span class="hljs-number">4</span>.<span class="hljs-number">29</span>%<span class="hljs-number">67</span>.<span class="hljs-number">16</span>%<span class="hljs-number">0</span>.<span class="hljs-number">29</span>s<span class="hljs-number">4</span>.<span class="hljs-number">29</span>%runtime.(*mspan).init(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">23</span>s<span class="hljs-number">3</span>.<span class="hljs-number">40</span>%<span class="hljs-number">70</span>.<span class="hljs-number">56</span>%<span class="hljs-number">0</span>.<span class="hljs-number">23</span>s<span class="hljs-number">3</span>.<span class="hljs-number">40</span>%runtime.markBits.isMarked(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">23</span>s<span class="hljs-number">3</span>.<span class="hljs-number">40</span>%<span class="hljs-number">73</span>.<span class="hljs-number">96</span>%<span class="hljs-number">0</span>.<span class="hljs-number">62</span>s<span class="hljs-number">9</span>.<span class="hljs-number">17</span>%runtime.greyobject<br><span class="hljs-attribute">0</span>.<span class="hljs-number">21</span>s<span class="hljs-number">3</span>.<span class="hljs-number">11</span>%<span class="hljs-number">77</span>.<span class="hljs-number">07</span>%<span class="hljs-number">0</span>.<span class="hljs-number">22</span>s<span class="hljs-number">3</span>.<span class="hljs-number">25</span>%runtime.spanOf(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">17</span>s<span class="hljs-number">2</span>.<span class="hljs-number">51</span>%<span class="hljs-number">79</span>.<span class="hljs-number">59</span>%<span class="hljs-number">0</span>.<span class="hljs-number">17</span>s<span class="hljs-number">2</span>.<span class="hljs-number">51</span>%runtime.libcCall<br><span class="hljs-attribute">0</span>.<span class="hljs-number">17</span>s<span class="hljs-number">2</span>.<span class="hljs-number">51</span>%<span class="hljs-number">82</span>.<span class="hljs-number">10</span>%<span class="hljs-number">0</span>.<span class="hljs-number">18</span>s<span class="hljs-number">2</span>.<span class="hljs-number">66</span>%runtime.heapBitsSetType<br><span class="hljs-attribute">0</span>.<span class="hljs-number">17</span>s<span class="hljs-number">2</span>.<span class="hljs-number">51</span>%<span class="hljs-number">84</span>.<span class="hljs-number">62</span>%<span class="hljs-number">0</span>.<span class="hljs-number">17</span>s<span class="hljs-number">2</span>.<span class="hljs-number">51</span>%runtime.(*mspan).divideByElemSize(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">13</span>s<span class="hljs-number">1</span>.<span class="hljs-number">92</span>%<span class="hljs-number">86</span>.<span class="hljs-number">54</span>%<span class="hljs-number">0</span>.<span class="hljs-number">13</span>s<span class="hljs-number">1</span>.<span class="hljs-number">92</span>%runtime.heapBits.next(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">11</span>s<span class="hljs-number">1</span>.<span class="hljs-number">63</span>%<span class="hljs-number">88</span>.<span class="hljs-number">17</span>%<span class="hljs-number">0</span>.<span class="hljs-number">59</span>s<span class="hljs-number">8</span>.<span class="hljs-number">73</span>%runtime.wbBufFlush1<br><span class="hljs-attribute">0</span>.<span class="hljs-number">08</span>s<span class="hljs-number">1</span>.<span class="hljs-number">18</span>%<span class="hljs-number">89</span>.<span class="hljs-number">35</span>%<span class="hljs-number">0</span>.<span class="hljs-number">08</span>s<span class="hljs-number">1</span>.<span class="hljs-number">18</span>%runtime.madvise<br><span class="hljs-attribute">0</span>.<span class="hljs-number">07</span>s<span class="hljs-number">1</span>.<span class="hljs-number">04</span>%<span class="hljs-number">90</span>.<span class="hljs-number">38</span>%<span class="hljs-number">0</span>.<span class="hljs-number">07</span>s<span class="hljs-number">1</span>.<span class="hljs-number">04</span>%runtime.heapBits.bits(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">07</span>s<span class="hljs-number">1</span>.<span class="hljs-number">04</span>%<span class="hljs-number">91</span>.<span class="hljs-number">42</span>%<span class="hljs-number">0</span>.<span class="hljs-number">07</span>s<span class="hljs-number">1</span>.<span class="hljs-number">04</span>%runtime.(*mspan).refillAllocCache<br><span class="hljs-attribute">0</span>.<span class="hljs-number">07</span>s<span class="hljs-number">1</span>.<span class="hljs-number">04</span>%<span class="hljs-number">92</span>.<span class="hljs-number">46</span>%<span class="hljs-number">0</span>.<span class="hljs-number">10</span>s<span class="hljs-number">1</span>.<span class="hljs-number">48</span>%runtime.(*gcBits).bitp(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">06</span>s<span class="hljs-number">0</span>.<span class="hljs-number">89</span>%<span class="hljs-number">93</span>.<span class="hljs-number">34</span>%<span class="hljs-number">0</span>.<span class="hljs-number">06</span>s<span class="hljs-number">0</span>.<span class="hljs-number">89</span>%runtime.memclrNoHeapPointers<br><span class="hljs-attribute">0</span>.<span class="hljs-number">06</span>s<span class="hljs-number">0</span>.<span class="hljs-number">89</span>%<span class="hljs-number">94</span>.<span class="hljs-number">23</span>%<span class="hljs-number">0</span>.<span class="hljs-number">06</span>s<span class="hljs-number">0</span>.<span class="hljs-number">89</span>%runtime.(*wbBuf).putFast(inline)<br><span class="hljs-attribute">0</span>.<span class="hljs-number">05</span>s<span class="hljs-number">0</span>.<span class="hljs-number">74</span>%<span class="hljs-number">94</span>.<span class="hljs-number">97</span>%<span class="hljs-number">0</span>.<span class="hljs-number">72</span>s<span class="hljs-number">10</span>.<span class="hljs-number">65</span>%runtime.bulkBarrierPreWriteSrcOnly<br><span class="hljs-attribute">0</span>.<span class="hljs-number">04</span>s<span class="hljs-number">0</span>.<span class="hljs-number">59</span>%<span class="hljs-number">95</span>.<span class="hljs-number">56</span>%<span class="hljs-number">0</span>.<span class="hljs-number">04</span>s<span class="hljs-number">0</span>.<span class="hljs-number">59</span>%runtime.pthread_kill<br><span class="hljs-attribute">0</span>.<span class="hljs-number">04</span>s<span class="hljs-number">0</span>.<span class="hljs-number">59</span>%<span class="hljs-number">96</span>.<span class="hljs-number">15</span>%<span class="hljs-number">0</span>.<span class="hljs-number">04</span>s<span class="hljs-number">0</span>.<span class="hljs-number">59</span>%runtime.pthread_cond_wait<br><span class="hljs-attribute">0</span>.<span class="hljs-number">04</span>s<span class="hljs-number">0</span>.<span class="hljs-number">59</span>%<span class="hljs-number">96</span>.<span class="hljs-number">75</span>%<span class="hljs-number">0</span>.<span class="hljs-number">04</span>s<span class="hljs-number">0</span>.<span class="hljs-number">59</span>%runtime.mmap<br><span class="hljs-attribute">0</span>.<span class="hljs-number">02</span>s<span class="hljs-number">0</span>.<span class="hljs-number">30</span>%<span class="hljs-number">97</span>.<span class="hljs-number">04</span>%<span class="hljs-number">0</span>.<span class="hljs-number">19</span>s<span class="hljs-number">2</span>.<span class="hljs-number">81</span>%runtime.(*mspan).objIndex(inline)<br></code></pre></td></tr></table></figure></li><li>查看Graph<br><img src="https://segmentfault.com/img/remote/1460000016412017"><br>框越大，线越粗代表它占用的时间越大</li><li>查看Peek<br><img src="https://segmentfault.com/img/remote/1460000016412018"></li></ul><h5 id="4-PProf-火焰图"><a href="#4-PProf-火焰图" class="headerlink" title="4.PProf 火焰图"></a>4.PProf 火焰图</h5><p>另一种可视化数据的方法是火焰图，需手动安装原生 PProf 工具：<br>（1） 安装 PProf</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> -<span class="hljs-keyword">u</span> github.<span class="hljs-keyword">com</span>/google/pprof<br></code></pre></td></tr></table></figure><p>（2） 启动 PProf 可视化界面:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pprof <span class="hljs-attribute">-http</span>=:8080 cpu.prof<br></code></pre></td></tr></table></figure><p>（3）查看 PProf 可视化界面<br>打开 PProf 的可视化界面时，你会明显发现比官方工具链的 PProf 精致一些，并且多了 Flame Graph（火焰图）<br>它就是本次的目标之一，它的最大优点是动态的。调用顺序由上到下（A -&gt; B -&gt; C -&gt; D），每一块代表一个函数，越大代表占用 CPU 的时间更长。同时它也支持点击块深入进行分析！<br><img src="https://segmentfault.com/img/remote/1460000016412020"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
